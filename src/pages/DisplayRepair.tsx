
import React, { useState, useEffect } from "react";

const DisplayRepair: React.FC = () => {
  const [isOpen, setIsOpen] = useState(() => {
    const saved = localStorage.getItem("displayRepairOpen");
    return saved === "true";
  });
  const [tab, setTab] = useState("form");
  const [model, setModel] = useState("");
  const [imei, setImei] = useState("");
  const [description, setDescription] = useState("");
  const [images, setImages] = useState<File[]>([]);
  const [submitted, setSubmitted] = useState(false);
  const [submittedAt, setSubmittedAt] = useState<Date | null>(null);

  useEffect(() => {
    localStorage.setItem("displayRepairOpen", isOpen.toString());
  }, [isOpen]);

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setImages(Array.from(e.target.files));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const res = await fetch(import.meta.env.VITE_API_URL + "/api/repairs/submit-repair", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          model,
          imei,
          description,
          type: "display",
        }),
      });

      if (res.ok) {
        console.log("‚úÖ –ó–∞—è–≤–∫–∞—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        setSubmitted(true);
        setSubmittedAt(new Date());
        setModel("");
        setImei("");
        setDescription("");
        setImages([]);
      } else {
        alert("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ.");
      }
    } catch (err) {
      console.error("‚ùå Error submitting repair:", err);
      alert("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞.");
    }
  };

  const getEstimatedPrice = () => {
    if (!model) return null;
    const highEnd = ["Pro", "Pro Max"].some((x) => model.includes(x));
    return highEnd ? "–û—á–∞–∫–≤–∞–Ω–∞ —Ü–µ–Ω–∞: 220‚Äì280 –ª–≤" : "–û—á–∞–∫–≤–∞–Ω–∞ —Ü–µ–Ω–∞: 160‚Äì200 –ª–≤";
  };

  const getElapsedMinutes = () => {
    if (!submittedAt) return null;
    const now = new Date().getTime();
    const diff = Math.floor((now - submittedAt.getTime()) / 60000);
    return `${diff} –º–∏–Ω—É—Ç–∏`;
  };

  return (
    <div
      className="bg-black text-white min-h-screen flex flex-col items-center justify-center px-4 py-10 font-sans"
      style={{ fontFamily: "Orbitron, sans-serif" }}
    >
      <div className="text-center mb-6 max-w-md">
        <h1 className="text-2xl sm:text-3xl font-bold text-white mb-2">
          –°—á—É–ø–µ–Ω –¥–∏—Å–ø–ª–µ–π?
        </h1>
        <p className="text-white/80 text-sm sm:text-base">
          –ü–æ–ø—Ä–∞–≤–∏ –≥–æ –±—ä—Ä–∑–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–æ ‚Äì –∏–∑–±–µ—Ä–∏ –º–æ–¥–µ–ª–∞ —Å–∏, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∏
          –∫–∞—á–∏ —Å–Ω–∏–º–∫–∏. –ù–∏–µ —â–µ —Å–µ –ø–æ–≥—Ä–∏–∂–∏–º –∑–∞ –æ—Å—Ç–∞–Ω–∞–ª–æ—Ç–æ.
        </p>
      </div>

      <div className="bg-white/10 backdrop-blur-md rounded-2xl shadow-xl w-full max-w-md overflow-hidden border border-white/20">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="w-full bg-gradient-to-r from-purple-800 to-blue-700 flex flex-col items-center justify-center p-6 hover:opacity-90 cursor-pointer"
        >
          <img
            src="/images/SFAQ-header-iphone-screen_2x-gray.png"
            alt="iPhone display illustration"
            className="w-20 h-20 object-contain mb-3"
          />
          <h2 className="text-xl font-bold text-white flex items-center gap-2">
            –°–º—è–Ω–∞ –Ω–∞ –¥–∏—Å–ø–ª–µ–π
            <span>{isOpen ? "‚è∂" : "‚è∑"}</span>
          </h2>
        </button>

        {isOpen && (
          <div>
            {!submitted ? (
              <>
                <div className="flex border-b border-white/10">
                  <button
                    className={`flex-1 p-3 text-center font-semibold ${tab === "form"
                      ? "bg-black/30 text-blue-400"
                      : "hover:bg-black/20"}`}
                    onClick={() => setTab("form")}
                  >
                    –ó–∞—è–≤–∫–∞
                  </button>
                  <button
                    className={`flex-1 p-3 text-center font-semibold ${tab === "photos"
                      ? "bg-black/30 text-blue-400"
                      : "hover:bg-black/20"}`}
                    onClick={() => setTab("photos")}
                  >
                    –°–Ω–∏–º–∫–∏
                  </button>
                </div>

                {tab === "form" ? (
                  <form onSubmit={handleSubmit} className="p-6 space-y-4">
                    <div>
                      <label className="block mb-1 text-sm font-semibold">
                        –ú–æ–¥–µ–ª –Ω–∞ iPhone
                      </label>
                      <select
                        value={model}
                        onChange={(e) => setModel(e.target.value)}
                        className="w-full p-3 rounded bg-white/90 text-black"
                        required
                      >
                        <option value="">–ò–∑–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª</option>
                        {[
                          "iPhone X", "XR", "XS", "XS Max", "11", "11 Pro", "11 Pro Max",
                          "12", "12 Pro", "12 Pro Max", "13", "13 Pro", "13 Pro Max",
                          "14", "14 Pro", "14 Pro Max", "15", "15 Pro", "15 Pro Max",
                          "16", "16 Pro", "16 Pro Max",
                        ].map((m) => (
                          <option key={m}>{`iPhone ${m}`}</option>
                        ))}
                      </select>
                      {model && (
                        <p className="mt-1 text-sm text-green-300 font-medium">
                          üí∞ {getEstimatedPrice()}
                        </p>
                      )}
                    </div>

                    <div>
                      <label className="block mb-1 text-sm font-semibold">
                        IMEI –Ω–æ–º–µ—Ä
                      </label>
                      <input
                        type="text"
                        value={imei}
                        onChange={(e) => setImei(e.target.value)}
                        className="w-full p-3 rounded bg-white/10 text-white"
                        required
                      />
                    </div>

                    <div>
                      <label className="block mb-1 text-sm font-semibold">
                        –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞
                      </label>
                      <textarea
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                        rows={4}
                        className="w-full p-3 rounded bg-white/10 text-white"
                        required
                      />
                    </div>

                    <button
                      type="submit"
                      className="w-full bg-orange-500 hover:bg-orange-600 text-white py-3 rounded-lg font-bold shadow-lg shadow-orange-500/30"
                    >
                      –ò–∑–ø—Ä–∞—Ç–∏ –∑–∞—è–≤–∫–∞
                    </button>
                  </form>
                ) : (
                  <div className="p-6 space-y-4">
                    <label className="block mb-2 text-sm font-semibold">
                      –ö–∞—á–∏ —Å–Ω–∏–º–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    </label>
                    <input
                      type="file"
                      accept="image/*"
                      multiple
                      onChange={handleImageChange}
                      className="w-full bg-white/10 text-white p-2 rounded"
                    />

                    {images.length > 0 && (
                      <div className="grid grid-cols-2 gap-3 mt-4">
                        {images.map((img, index) => (
                          <img
                            key={index}
                            src={URL.createObjectURL(img)}
                            alt={`uploaded-${index}`}
                            className="w-full h-32 object-cover rounded border border-white/20"
                          />
                        ))}
                      </div>
                    )}
                  </div>
                )}
              </>
            ) : (
              <div className="p-6 space-y-4 text-center">
                <h3 className="text-lg font-semibold text-green-400 mb-2">
                  ‚úÖ –ó–∞—è–≤–∫–∞—Ç–∞ –µ –ø—Ä–∏–µ—Ç–∞!
                </h3>
                <ul className="text-sm text-white space-y-2">
                  <li>üì© –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞</li>
                  <li>‚è≥ –û—á–∞–∫–≤–∞–π—Ç–µ –æ–±–∞–∂–¥–∞–Ω–µ –¥–æ 2 —á–∞—Å–∞</li>
                  <li>üõ† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ç–µ</li>
                  <li>üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ / —Ä–µ–º–æ–Ω—Ç</li>
                </ul>
                {submittedAt && (
                  <p className="mt-4 text-xs text-white/70">
                    ‚è± –ò–∑–º–∏–Ω–∞–ª–æ –≤—Ä–µ–º–µ: {getElapsedMinutes()}
                  </p>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default DisplayRepair;
